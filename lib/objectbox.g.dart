// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/entities/bloc_state_entity.dart';
import 'database/entities/download_track_task_entity.dart';
import 'database/entities/remote_config_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3668599123320527982),
      name: 'BlocStateEntity',
      lastPropertyId: const IdUid(3, 2675233382253411352),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1679074344431511129),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7403914866919777721),
            name: 'key',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 379657838210909860)),
        ModelProperty(
            id: const IdUid(3, 2675233382253411352),
            name: 'json',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6103890219043900984),
      name: 'DownloadTrackTaskEntity',
      lastPropertyId: const IdUid(6, 8584594485685084463),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8069588030321501482),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8211554727633866950),
            name: 'taskId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5146245730303187585),
            name: 'url',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9075908384688843332),
            name: 'filename',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2690489101377617518),
            name: 'downloadedBytes',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8584594485685084463),
            name: 'totalBytes',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 9202169296533729365),
      name: 'RemoteConfigEntity',
      lastPropertyId: const IdUid(2, 939439220607962960),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1058503934963432471),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 939439220607962960),
            name: 'json',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 9202169296533729365),
      lastIndexId: const IdUid(1, 379657838210909860),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    BlocStateEntity: EntityDefinition<BlocStateEntity>(
        model: _entities[0],
        toOneRelations: (BlocStateEntity object) => [],
        toManyRelations: (BlocStateEntity object) => {},
        getId: (BlocStateEntity object) => object.id,
        setId: (BlocStateEntity object, int id) {
          object.id = id;
        },
        objectToFB: (BlocStateEntity object, fb.Builder fbb) {
          final keyOffset = fbb.writeString(object.key);
          final jsonOffset = fbb.writeString(object.json);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, keyOffset);
          fbb.addOffset(2, jsonOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final keyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final jsonParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = BlocStateEntity(key: keyParam, json: jsonParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    DownloadTrackTaskEntity: EntityDefinition<DownloadTrackTaskEntity>(
        model: _entities[1],
        toOneRelations: (DownloadTrackTaskEntity object) => [],
        toManyRelations: (DownloadTrackTaskEntity object) => {},
        getId: (DownloadTrackTaskEntity object) => object.id,
        setId: (DownloadTrackTaskEntity object, int id) {
          object.id = id;
        },
        objectToFB: (DownloadTrackTaskEntity object, fb.Builder fbb) {
          final taskIdOffset = fbb.writeString(object.taskId);
          final urlOffset = fbb.writeString(object.url);
          final filenameOffset = fbb.writeString(object.filename);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, taskIdOffset);
          fbb.addOffset(2, urlOffset);
          fbb.addOffset(3, filenameOffset);
          fbb.addInt64(4, object.downloadedBytes);
          fbb.addInt64(5, object.totalBytes);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final taskIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final filenameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final downloadedBytesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final totalBytesParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = DownloadTrackTaskEntity(
              taskId: taskIdParam,
              url: urlParam,
              filename: filenameParam,
              downloadedBytes: downloadedBytesParam,
              totalBytes: totalBytesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    RemoteConfigEntity: EntityDefinition<RemoteConfigEntity>(
        model: _entities[2],
        toOneRelations: (RemoteConfigEntity object) => [],
        toManyRelations: (RemoteConfigEntity object) => {},
        getId: (RemoteConfigEntity object) => object.id,
        setId: (RemoteConfigEntity object, int id) {
          object.id = id;
        },
        objectToFB: (RemoteConfigEntity object, fb.Builder fbb) {
          final jsonOffset = fbb.writeString(object.json);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, jsonOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final jsonParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = RemoteConfigEntity(json: jsonParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [BlocStateEntity] entity fields to define ObjectBox queries.
class BlocStateEntity_ {
  /// see [BlocStateEntity.id]
  static final id =
      QueryIntegerProperty<BlocStateEntity>(_entities[0].properties[0]);

  /// see [BlocStateEntity.key]
  static final key =
      QueryStringProperty<BlocStateEntity>(_entities[0].properties[1]);

  /// see [BlocStateEntity.json]
  static final json =
      QueryStringProperty<BlocStateEntity>(_entities[0].properties[2]);
}

/// [DownloadTrackTaskEntity] entity fields to define ObjectBox queries.
class DownloadTrackTaskEntity_ {
  /// see [DownloadTrackTaskEntity.id]
  static final id =
      QueryIntegerProperty<DownloadTrackTaskEntity>(_entities[1].properties[0]);

  /// see [DownloadTrackTaskEntity.taskId]
  static final taskId =
      QueryStringProperty<DownloadTrackTaskEntity>(_entities[1].properties[1]);

  /// see [DownloadTrackTaskEntity.url]
  static final url =
      QueryStringProperty<DownloadTrackTaskEntity>(_entities[1].properties[2]);

  /// see [DownloadTrackTaskEntity.filename]
  static final filename =
      QueryStringProperty<DownloadTrackTaskEntity>(_entities[1].properties[3]);

  /// see [DownloadTrackTaskEntity.downloadedBytes]
  static final downloadedBytes =
      QueryIntegerProperty<DownloadTrackTaskEntity>(_entities[1].properties[4]);

  /// see [DownloadTrackTaskEntity.totalBytes]
  static final totalBytes =
      QueryIntegerProperty<DownloadTrackTaskEntity>(_entities[1].properties[5]);
}

/// [RemoteConfigEntity] entity fields to define ObjectBox queries.
class RemoteConfigEntity_ {
  /// see [RemoteConfigEntity.id]
  static final id =
      QueryIntegerProperty<RemoteConfigEntity>(_entities[2].properties[0]);

  /// see [RemoteConfigEntity.json]
  static final json =
      QueryStringProperty<RemoteConfigEntity>(_entities[2].properties[1]);
}
